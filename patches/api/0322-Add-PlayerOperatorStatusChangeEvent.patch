From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Silvre <silvre76@gmail.com>
Date: Mon, 28 Jun 2021 23:12:54 -0500
Subject: [PATCH] Add PlayerOperatorStatusChangeEvent

As the name suggests, this event is called whenever
a player's operator status is being changed.

diff --git a/src/main/java/io/papermc/paper/event/player/PlayerOperatorStatusChangeEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerOperatorStatusChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..c36f2ce741d970da419e1d1b23c4da9819f80556
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/player/PlayerOperatorStatusChangeEvent.java
@@ -0,0 +1,80 @@
+package io.papermc.paper.event.player;
+
+import org.bukkit.OfflinePlayer;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when a player's operator status is altered.
+ */
+public class PlayerOperatorStatusChangeEvent extends Event implements Cancellable {
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    @NotNull private final OfflinePlayer player;
+    @NotNull private final Operation operation;
+    private boolean cancelled;
+
+    public PlayerOperatorStatusChangeEvent(@NotNull OfflinePlayer player, @NotNull Operation operation) {
+        this.player = player;
+        this.operation = operation;
+        this.cancelled = false;
+    }
+
+    /**
+     * Gets the player whose operator status is being changed.
+     *
+     * @return the player in question.
+     */
+    @NotNull
+    public OfflinePlayer getPlayer() {
+        return player;
+    }
+
+    /**
+     * Gets whether the player is being opped or de-opped.
+     *
+     * @return the type of operator state change
+     */
+    @NotNull public Operation getOperation() {
+        return operation;
+    }
+
+    /**
+     * Gets the cancellation state of this event.  A cancelled event will not
+     * be executed in the server, but will still pass to other plugins.
+     * <p>
+     * If cancelled, the player's operator status will <b>not</b> be changed.
+     *
+     * @return true if this event is cancelled
+     */
+    @Override public boolean isCancelled() {
+        return cancelled;
+    }
+
+    /**
+     * Sets the cancellation state of this event. A cancelled event will not
+     * be executed in the server, but will still pass to other plugins.
+     * <p>
+     * If cancelled, the player's operator status will <b>not</b> be changed.
+     *
+     * @param cancelled true if you wish to cancel this event
+     */
+    @Override public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @NotNull @Override public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+    public enum Operation {
+        OP,
+        DEOP;
+    }
+}
